package com.mac.kafka.service.impl;

import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson2.JSON;
import com.alibaba.fastjson2.JSONObject;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.github.yulichang.wrapper.MPJLambdaWrapper;
import com.mac.kafka.dao.KafkaConfigMapper;
import com.mac.kafka.model.ConfigEntity;
import com.mac.kafka.service.KafkaConsumerConfigService;
import org.springframework.kafka.config.KafkaListenerEndpointRegistry;
import org.springframework.kafka.listener.MessageListenerContainer;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.Optional;

/**
 * @author macjay
 */
@Service
public class KafkaConsumerConfigServiceImpl extends ServiceImpl<KafkaConfigMapper, ConfigEntity> implements KafkaConsumerConfigService {


    @Resource
    private   KafkaListenerEndpointRegistry registry;


    /**
     * Record kafka offset.
     *
     * @param kafkaConsumerConfigId the kafka consumer config id
     * @param partition             the partition
     * @param offset                the offset
     * @return the kafka consumer config
     */
    @Override
    public ConfigEntity recordKafkaOffset(long kafkaConsumerConfigId, int partition, long offset) {
        ConfigEntity kafkaConsumerConfig = baseMapper.selectOne(new MPJLambdaWrapper<ConfigEntity>()
            .eq(ConfigEntity::getId,kafkaConsumerConfigId));
        JSONObject topicOffsetJson = StrUtil.isEmpty(kafkaConsumerConfig.getTopicOffset())?new JSONObject(): JSON.parseObject(kafkaConsumerConfig.getTopicOffset());
        topicOffsetJson.put(kafkaConsumerConfig.getKafkaTopic() + "$" + partition, offset + 1);
        kafkaConsumerConfig.setTopicOffset(String.valueOf(topicOffsetJson));
        baseMapper.updateById(kafkaConsumerConfig);
        return kafkaConsumerConfig;
    }

    /**
     * Gets kafka offset.
     *
     * @param kafkaConsumerConfigId the kafka consumer config id
     * @return the kafka offset
     */
    @Override
    public JSONObject getKafkaOffset(long kafkaConsumerConfigId) {
        ConfigEntity kafkaConsumerConfig=baseMapper.selectById(kafkaConsumerConfigId);
        return StrUtil.isEmpty(kafkaConsumerConfig.getKafkaConfig())?new JSONObject(): JSON.parseObject(kafkaConsumerConfig.getTopicOffset());
    }

    /**
     * Find all list.
     *
     * @return the list
     */
    @Override
    public List<ConfigEntity> findAll() {
        return baseMapper.selectList(new QueryWrapper<>());
    }

    /**
     * Stop consumer boolean.
     *
     * @param id the id
     */
    @Override
    public void stopConsumer(Long id) {
        ConfigEntity kafkaConsumerConfig = baseMapper.selectById(id);
        String containerId = "ConsumerZoningProcessing-" + kafkaConsumerConfig.getId();
        MessageListenerContainer container = registry.getListenerContainer(containerId);
        if (container != null) {
            container.stop();
        }
    }

    /**
     * Start consumer.
     *
     * @param id the id
     */
    @Override
    public void startConsumer(Long id) {
        ConfigEntity kafkaConsumerConfig =  baseMapper.selectById(id);
        String containerId = "ConsumerZoningProcessing-" + kafkaConsumerConfig.getId();
        MessageListenerContainer container = registry.getListenerContainer(containerId);
        if (container != null) {
            container.start();
        }
    }
}
