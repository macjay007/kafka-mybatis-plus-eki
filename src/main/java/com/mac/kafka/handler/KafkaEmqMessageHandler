package com.mac.kafka.handler;

import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson2.JSON;
import com.mac.kafka.config.KafkaDataAutoConfig;
import com.mac.kafka.enums.KafkaEnum;
import com.mac.kafka.handler.param.ReceiveDataParam;
import com.mac.kafka.handler.strategy.KafkaStrategyInterface;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;

import java.nio.charset.StandardCharsets;

/**
*
* @author zj
* @Date 2024/7/8 16:21 
**/
@Slf4j
public class KafkaEmqMessageHandler implements KafkaMessageHandler<String,String>{
    @Override
    public void handle(ConsumerRecord<String, String> record) {
        // 处理消息的逻辑
//        System.out.printf("Received message: (%s, %s) at offset %d from partition %d%n",
//            record.key(), record.value(), record.offset(), record.partition());
        String payLoad = null;
        try {
            payLoad=objConverseStr(record.value());
            ReceiveDataParam param = JSON.parseObject(payLoad, ReceiveDataParam.class);
            log.info("\n---------------其他服务发送的数据-->---------------\ntopic：{},\nmessage：{}\n--------------------------------->--------------\n", param.getCmd(), payLoad);
            KafkaEnum enums = KafkaEnum.get(null!=param.getRequestCmd()?param.getRequestCmd().toString():param.getCmd());
            if(enums.getRequestCmd().equals(KafkaEnum.FAILED.getRequestCmd())){
                log.info("非法cmd，cmd:{}", StrUtil.isNotEmpty(param.getRequestCmd().toString())?param.getRequestCmd().toString():param.getCmd() );
                return ;
            }
            KafkaStrategyInterface handler = KafkaDataAutoConfig.msgStrategyMap.get(enums);
            handler.invokeStrategy(param);
        } catch (Exception e) {
            log.error("异常信息：MqttConusmerMsgHandler->handleMessage(),原因：{},kafka请求数据:\n{}", e.getMessage(), payLoad, e);
        }
    }


    /**
     * 强转
     * @author zj
     * @Date 2023/11/9 9:12
     **/
    public <T> String objConverseStr(T s){
        String payLoad = null;
        if(s instanceof  byte[] ){
            byte[] payLoadByte = (byte[]) s;
            payLoad = new String(payLoadByte, StandardCharsets.UTF_8);
        }else if(s instanceof String) {
            return (String) s;
        }
        return payLoad;
    }
}
